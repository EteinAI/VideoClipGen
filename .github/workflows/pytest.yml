# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # The values for these variables are taken from GitHub Secrets
    env:
      ALI_ACCESSKEY_ID: ${{ secrets.ALI_ACCESSKEY_ID }}
      ALI_ACCESSKEY_SECRET: ${{ secrets.ALI_ACCESSKEY_SECRET }}
      ALI_APP_KEY: ${{ secrets.ALI_APP_KEY }}
      PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}

    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy-2.7 and pypy-3.8
      matrix:
        python-version: ["3.11"]
        # TODO enable this when pyproject setup
        # requirements: ['.[tests]', '.[compat_tests]']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        id: python-setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Try to load cached dependencies
        uses: actions/cache@v3
        id: deps-cache
        with:
          path: ${{ env.pythonLocation }}
          key: python-dependencies-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-test.txt') }}-${{ env.pythonLocation }}

      - name: Install external dependencies on cache miss
        run: |
          python -m pip install --no-cache-dir --upgrade pip
          python -m pip install --no-cache-dir -r requirements.txt -r requirements-test.txt
        if: steps.deps-cache.outputs.cache-hit != 'true'

      - name: Pull data
        run: |
          echo "TODO: data management"

      - name: Restore models from cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/clip
            ~/.cache/huggingface/hub
          key: models-${{ matrix.os }}-${{ env.NEW_MODEL_CACHE_HASH }}
          restore-keys: |
            models-${{ matrix.os }}-
      
      - name: Try load/update models
        shell: bash
        run: |
          echo "OLD_HF_CACHE_HASH=$(find ~/.cache/huggingface/hub ~/.cache/clip -type f -exec sha256sum {} + | LC_ALL=C sort | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_ENV
          python -m scripts.load_models
          echo "NEW_HF_CACHE_HASH=$(find ~/.cache/huggingface/hub ~/.cache/clip -type f -exec sha256sum {} + | LC_ALL=C sort | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_ENV
          echo 'Load/update models...'
          echo 'Old model hash: ${{ env.OLD_MODEL_CACHE_HASH }}'
          echo 'New model hash: ${{ env.NEW_MODEL_CACHE_HASH }}'

      - name: Save new models to cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cache/clip
            ~/.cache/huggingface/hub
          key: models-${{ matrix.os }}-${{ env.NEW_MODEL_CACHE_HASH }}
        # Only save cache if the hash has changed
        if: env.NEW_MODEL_CACHE_HASH != env.OLD_MODEL_CACHE_HASH
